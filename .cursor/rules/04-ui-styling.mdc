---
globs: *.tsx,*.css,*.scss
description: UI styling guidelines using Tailwind CSS and shadcn/ui design system
---

# UI Styling & Design System

## Design System Overview

This project uses a comprehensive design system built on **Tailwind CSS 4.0.13** with **shadcn/ui** components in the "New York" style. The design system is defined in [src/app/globals.css](mdc:src/app/globals.css) and configured in [components.json](mdc:components.json).

## Color System

### OKLCH Color Space
The project uses modern OKLCH color space for better color consistency:

```css
/* Light theme variables from globals.css */
:root {
  --background: oklch(1 0 0);          /* Pure white */
  --foreground: oklch(0.145 0 0);      /* Dark text */
  --primary: oklch(0.205 0 0);         /* Primary brand color */
  --muted: oklch(0.97 0 0);            /* Light gray backgrounds */
  --border: oklch(0.922 0 0);          /* Border color */
}

/* Dark theme */
.dark {
  --background: oklch(0.145 0 0);      /* Dark background */
  --foreground: oklch(0.985 0 0);      /* Light text */
  --primary: oklch(0.985 0 0);         /* Inverted primary */
}
```

### Semantic Color Usage
Always use semantic color variables instead of hardcoded values:

```tsx
// Good - using semantic colors
<div className="bg-background text-foreground border-border">
  <button className="bg-primary text-primary-foreground hover:bg-primary/90">
    Submit
  </button>
</div>

// Avoid - hardcoded colors
<div className="bg-white text-black border-gray-200">
  <button className="bg-gray-900 text-white hover:bg-gray-800">
    Submit
  </button>
</div>
```

## Spacing & Layout

### Border Radius System
Use the dynamic radius system defined in CSS variables:

```css
/* From globals.css */
--radius: 0.625rem;                    /* Base radius */

/* From tailwind.config.js */
borderRadius: {
  lg: "var(--radius)",                 /* Large radius */
  md: "calc(var(--radius) - 2px)",     /* Medium radius */
  sm: "calc(var(--radius) - 4px)",     /* Small radius */
}
```

```tsx
// Usage in components
<div className="rounded-lg border">     {/* Large radius */}
<div className="rounded-md border">     {/* Medium radius */}
<div className="rounded-sm border">     {/* Small radius */}
```

### Consistent Spacing
Follow Tailwind's spacing scale for consistency:

```tsx
// Good - consistent spacing patterns
<div className="p-4 space-y-4">
  <div className="mb-6">
    <h2 className="text-lg font-semibold mb-2">Title</h2>
    <p className="text-muted-foreground">Description</p>
  </div>
</div>

// Component spacing patterns
<div className="flex items-center gap-2">  {/* Small gaps */}
<div className="grid grid-cols-1 gap-4">   {/* Medium gaps */}
<div className="space-y-6">                {/* Large vertical spacing */}
```

## Component Styling Patterns

### Class Name Utilities
Always use the `cn()` utility from [src/lib/utils.ts](mdc:src/lib/utils.ts) for combining classes:

```tsx
import { cn } from "@/lib/utils";

// Good - using cn() utility
export function Card({ className, children, ...props }: CardProps) {
  return (
    <div
      className={cn(
        "rounded-lg border bg-card text-card-foreground shadow-sm",
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
}

// Avoid - manual class concatenation
<div className={`rounded-lg border ${className || ""}`}>
```

### Variant Patterns
Use `class-variance-authority` (cva) for component variants:

```tsx
import { cva, type VariantProps } from "class-variance-authority";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

interface AlertProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof alertVariants> {}

const Alert = React.forwardRef<HTMLDivElement, AlertProps>(
  ({ className, variant, ...props }, ref) => (
    <div
      ref={ref}
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
);
```

## Typography

### Text Hierarchy
Use consistent typography scales:

```tsx
// Headings
<h1 className="text-3xl font-bold tracking-tight">Main Title</h1>
<h2 className="text-2xl font-semibold">Section Title</h2>
<h3 className="text-lg font-medium">Subsection</h3>

// Body text
<p className="text-base">Regular paragraph text</p>
<p className="text-sm text-muted-foreground">Secondary text</p>
<span className="text-xs text-muted-foreground">Small labels</span>

// Interactive text
<button className="text-primary hover:text-primary/80">Link text</button>
```

### Code & Monospace
For code elements in the chat interface:

```tsx
<code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
  code snippet
</code>

<pre className="overflow-x-auto rounded-lg bg-muted p-4">
  <code className="font-mono text-sm">
    {/* syntax highlighted code */}
  </code>
</pre>
```

## Responsive Design

### Mobile-First Approach
Use Tailwind's responsive prefixes consistently:

```tsx
<div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
  {/* Mobile: 1 column, Tablet: 2 columns, Desktop: 3 columns */}
</div>

<div className="p-4 md:p-6 lg:p-8">
  {/* Responsive padding */}
</div>

<div className="text-sm md:text-base lg:text-lg">
  {/* Responsive text sizing */}
</div>
```

## Animation & Transitions

### Tailwind Animations
Use built-in Tailwind animations with the `tailwindcss-animate` plugin:

```tsx
// Loading states
<div className="animate-spin h-4 w-4 border-2 border-primary border-t-transparent rounded-full" />

// Hover transitions
<button className="transition-colors duration-200 hover:bg-accent hover:text-accent-foreground">
  Hover me
</button>

// Fade in/out
<div className="animate-in fade-in-0 duration-200">
  Appearing content
</div>
```

## Custom Scrollbars

Use the custom scrollbar utility from [tailwind.config.js](mdc:tailwind.config.js):

```tsx
// Apply pretty scrollbars
<div className="scrollbar-pretty max-h-96 overflow-y-auto">
  {/* Long content that scrolls */}
</div>
```

## Dark Mode Support

### Theme Toggle
The project uses `next-themes` for theme management. Components should automatically support both themes through CSS variables:

```tsx
// Automatic theme support through CSS variables
<div className="bg-background text-foreground border-border">
  Content that adapts to both light and dark themes
</div>

// Manual dark mode variants (use sparingly)
<div className="bg-white dark:bg-gray-900 text-black dark:text-white">
  Manual theme handling
</div>
```

## Icon Usage

### Lucide React Icons
Use Lucide React for consistent iconography:

```tsx
import { ChevronDown, MessageSquare, Settings } from "lucide-react";

// Standard icon sizing
<MessageSquare className="h-4 w-4" />           {/* Small */}
<Settings className="h-5 w-5" />                {/* Medium */}
<ChevronDown className="h-6 w-6" />             {/* Large */}

// Icon with text
<button className="flex items-center gap-2">
  <MessageSquare className="h-4 w-4" />
  <span>Send Message</span>
</button>
```

## Accessibility

### ARIA Labels and Roles
Include proper accessibility attributes:

```tsx
<button
  aria-label="Send message"
  className="p-2 rounded-md hover:bg-accent"
>
  <Send className="h-4 w-4" />
</button>

<div role="alert" className="border-destructive text-destructive">
  Error message
</div>
```

### Focus States
Ensure interactive elements have visible focus states:

```tsx
<button className="focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
  Accessible button
</button>
```